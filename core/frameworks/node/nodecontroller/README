NC files

__init__.py
Everything starts here.It instantiates the msg_processor class and starts it.

nc_msg_processor_class.py
1. Stores system's info
1. Instantiates and starts buffer_mngr and nc_server
2. Processes registration and data msgs obtained from GNs and sends the registration msg for cloud and ACKs for GNs

nc_buffer_mngr_class.py
1. Manages the bfr_for_sent_msgs, bfr_for_sent_responses, bfr_for_in_to_out_msgs and bfr_for_out_to_in_msgs
2. All the communication with the socket is managed by this thread. Sends all msgs coming from msg_processor to sockets/cloud (using send_msg_to_cloud) and vice versa.
3. Handles encoding and decoding of msgs obtained from GNs
4. Implements the lock step protocol and hence responsible for deciding whether a new msg should be accepted or discarded
5. Handles simple ACKs (which might be received from GNs in future)

nc_internal_communicator_class.py
1. Is an asynchat object handling communication with a GN

nc_server_class.py: Change the IP in self.bind() to bind the server to the apt NC IP address (if there are two IP addresses for NC).
1. Server listening for GN's requests

nc_global_definition_section.py
1. Defines global variables, events if any, functions common to most threads

config_file_functions.py
1. Contains only initialize_config_file function

get_node_info.py
1. Runs bash scripts to collect system's info required for registration.

global_imports.py
1. Import statements of the packages used by most of the threads

Useful scripts to collect which all global variables from global_definition file should be imported for each module:
filter_needed_vars.py
filtered_vars

Python packages:
asynchat.py - Comparatively better version of asynchat
configobj.py - Provides ConfigOBj used to store registration info

