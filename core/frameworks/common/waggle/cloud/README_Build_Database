#WaggleDB: Cassandra DB preparation
#
#In Cassandra directory, type:
bin/cqlsh

#In cqlsh follow this:
#KEYSPACE: weatherdb

CREATE KEYSPACE weatherdb WITH replication = {
  'class': 'SimpleStrategy',
  'replication_factor': '2'
};

USE weatherdb;


#Table: sensor_data
CREATE TABLE sensor_data (
  instid text,
  sensorid text,
  ip text,
  readtime text,
  msgtype text,
  paramname list<text>,
  paramnote list<text>,
  paramtype list<text>,
  paramunit list<text>,
  paramval list<text>,
  protocol_version text,
  recvtime text,
  sequence_id text,
  status text,
  PRIMARY KEY (instid, sensorid, ip, readtime)
) WITH
  bloom_filter_fp_chance=0.010000 AND
  caching='KEYS_ONLY' AND
  comment='' AND
  dclocal_read_repair_chance=0.000000 AND
  gc_grace_seconds=864000 AND
  index_interval=128 AND
  read_repair_chance=0.100000 AND
  replicate_on_write='true' AND
  populate_io_cache_on_flush='false' AND
  default_time_to_live=0 AND
  speculative_retry='99.0PERCENTILE' AND
  memtable_flush_period_in_ms=0 AND
  compaction={'class': 'SizeTieredCompactionStrategy'} AND
  compression={'sstable_compression': 'LZ4Compressor'};


#Table: registration: for node controller to register 
CREATE TABLE registration (
  inst_id text,
  last_reg_time text,
  sensor_id list<text>,
  status text,
  PRIMARY KEY (inst_id, last_reg_time)
) WITH
  bloom_filter_fp_chance=0.010000 AND
  caching='KEYS_ONLY' AND
  comment='' AND
  dclocal_read_repair_chance=0.000000 AND
  gc_grace_seconds=864000 AND
  index_interval=128 AND
  read_repair_chance=0.100000 AND
  replicate_on_write='true' AND
  populate_io_cache_on_flush='false' AND
  default_time_to_live=0 AND
  speculative_retry='99.0PERCENTILE' AND
  memtable_flush_period_in_ms=0 AND
  compaction={'class': 'SizeTieredCompactionStrategy'} AND
  compression={'sstable_compression': 'LZ4Compressor'};

CREATE INDEX reg_status ON registration (status);

CREATE TABLE registration (inst_id text, last_reg_time text, sensor_id list<text>, status text, PRIMARY KEY (inst_id, last_reg_time));
CREATE INDEX reg_status ON registration (status);




#Table: commands: to buffer user command to node controllers. 
Columns: username(P), seq_num(P), inst_id(P), command, execution_status(index), timestamp
CREATE TABLE commands (
  username text,
  seq_num text,
  inst_id text,
  command text,
  execution_status text,
  "timestamp" text,
  PRIMARY KEY (username, seq_num, inst_id)
) WITH
  bloom_filter_fp_chance=0.010000 AND
  caching='KEYS_ONLY' AND
  comment='' AND
  dclocal_read_repair_chance=0.000000 AND
  gc_grace_seconds=864000 AND
  index_interval=128 AND
  read_repair_chance=0.100000 AND
  replicate_on_write='true' AND
  populate_io_cache_on_flush='false' AND
  default_time_to_live=0 AND
  speculative_retry='99.0PERCENTILE' AND
  memtable_flush_period_in_ms=0 AND
  compaction={'class': 'SizeTieredCompactionStrategy'} AND
  compression={'sstable_compression': 'LZ4Compressor'};

CREATE INDEX exe_status ON commands (execution_status);


