\section{Security}

Security is the way to support the privacy requirements, maintain control over the system, etc

\section{Physical}

Ideally no key pair co-exists on the system (only one of the pair at a single time)
Encrypted hard drive?

Physically locked box

Box attached to heavy object

No open connections to it

GPS?

Alarm? When opened or attempt to be removed

\section{Remote}

All communication is encrypted. Probably use symmetric encryption to reduce overhead


The embedded system has a single listening server (ssh) which is protected by a series of techniques
\begin{itemize}
 \item Port Knocking
 \item Login only through rsa key
 \item Strict configuration
 \item No remote root login
\end{itemize}


\subsection{Command execution}
\subsubsection{External User to Node}

For a user to execute instructions on the system the following process will need to be performed.

Communication should be encrypted at all stages

1. External user send the command through an encrypted channel to the cloud
2. The cloud receives the command decrypts it and checks if the user has permission to execute such instructions
3a. If no reply with permission denied
3b. If yes see if the node has been ever registered
4a.   If no reply with error
4b.   If yes put the command on the command queue (resides on the cloud side) of the specific node 
5. Node polls through an encrypted channel if there are pending commands to be executed by it
6a. If no cloud replies with no message
6b. If yes cloud send the command through an encypted channel on a listening port that was specified by the poll message. The message should be signed to prevent impersonation (this can be implemented by pre installing the public key of the cloud to all nodes)
7. Node receives poll response, decrypts, checks the signature and if everything is correct performs the command. If there is a problem we can choose to send a NACK or silently drop the package
8. Node sends the reply to the cloud
9. Cloud forwards the reply to the external user

\subsubsection{Node to Node inside LAN}

Should communication be encrypted? Probably yes

How do we prevent Node Controller impersonation?


\section{General}

Signed kernel modules

Add hash to important files so that an alteration will make the file unusable (we need to be carefull with this as it can lead to DoS)