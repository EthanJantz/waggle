WindVel Sensor

Max Sampling Frequency: 310 Hz
Sensor must be about 1-2 inches from rotating magnet for best results

The basic principle of this device is that a magnet is spun as a result of wind blowing on it. The magnetometer will take measurements of the magnetic field in a single axis, and as the magnet spins, the magnetometer should collect sinusoidal results. Then, we can take the sign of every measurement. Each time that value changes sign, a half rotation has been completed. That way, we can measure for a certain period of time and count the revolutions to determine the frequency. This frequency can be related to a linear wind velocity by multiplying it by a coefficient.

To take a measurement, what happens is the following:
1. The sensor is put into Single Measurement Mode by sending a write command on the I2C bus, changing the Mode Register to 0x01
2. Next, a delay is given to allow the device to reset the data ready bit and to begin taking the measurement. This delay must be at least 2 ms, or else a new measurement will not occur, and the old one will simply be reused
3. After that, the program waits and monitors the data ready bit, which is the last bit on the status register
4. Once the data is ready, the program reads 16 bits from the Data Output Y registers A and B, 8 bits from each

I found the best way to measure frequency was to store the millis() output before execution, and after execution, then print them both after the measurement was completed. I found that the highest frequency at which I could obtain discrete values for every measurement was 310 Hz.

The table below shows how changing the delay in the loop affects the sampling frequency, and maximum possible wind speed to observe:

// DELAY: 1  - Sampling Rate: 310  Hz    Max observed freq: 155   Hz   Max observed speed: 168.6 m/s
// DELAY: 2  - Sampling Rate: 238  Hz    Max observed freq: 119   Hz   Max observed speed: 129.4 m/s
// DELAY: 3  - Sampling Rate: 192  Hz    Max observed freq: 96    Hz   Max observed speed: 104.4 m/s
// DELAY: 4  - Sampling Rate: 160  Hz    Max observed freq: 80    Hz   Max observed speed: 87.0  m/s
// DELAY: 5  - Sampling Rate: 139  Hz    Max observed freq: 69.5  Hz   Max observed speed: 75.6  m/s
// DELAY: 6  - Sampling Rate: 121  Hz    Max observed freq: 60.5  Hz   Max observed speed: 65.8  m/s
// DELAY: 7  - Sampling Rate: 109  Hz    Max observed freq: 54.5  Hz   Max observed speed: 59.3  m/s
// DELAY: 8  - Sampling Rate: 98.4 Hz    Max observed freq: 49.20 Hz   Max observed speed: 53.5  m/s
// DELAY: 9  - Sampling Rate: 89.3 Hz    Max observed freq: 44.65 Hz   Max observed speed: 48.6  m/s
// DELAY: 10 - Sampling Rate: 81.7 Hz    Max observed freq: 41.35 Hz   Max observed speed: 45.0  m/s
// DELAY: 15 - Sampling Rate: 58.1 Hz    Max observed freq: 29.05 Hz   Max observed speed: 31.6  m/s
// DELAY: 20 - Sampling Rate: 45.0 Hz    Max observed freq: 20.50 Hz   Max observed speed: 22.3  m/s
// DELAY: 25 - Sampling Rate: 36.8 Hz    Max observed freq: 18.40 Hz   Max observed speed: 20.0  m/s

My whole test setup was the one shown in the enclosed image. I had a motor connected to a DC power supply so I could regulate how fast it was turning. Then, I used a rod to connect the spinning motor to the Vaavud device which had a spinning magnet. The rod later turned out to be unnecessary because the magnetic field of the motor was not interfering in any way with the magnetic field of the Vaavud device.

The speeds were determined experimentally, by comparing the dominant frequency generated to the reading on the Vaavud mobile app. I was able to establish a linear relationsihp between the frequency and the wind speed, which is where the coefficient of 1.0876 came from. In order to find wind speed, simply multiply the frequency by that coefficient. 

It is also important to note that when I implemented the board without the motor rotating it at a constant rate, the output frequency started becoming 0 no matter how hard I blew on it or tried to turn it. This was caused by the sampling frequency being too slow. The sensor was sampling for too long and although the waveforms did appear to be sinusoidal, without the constant periodicity of the motor, the algorithm was not able to resolve a single dominant frequency, so it determined the wind speed to be 0. This occurred when the sampling frequency was less than 160 Hz.
