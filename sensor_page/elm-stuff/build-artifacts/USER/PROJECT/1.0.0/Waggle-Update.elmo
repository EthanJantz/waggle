Elm.Waggle = Elm.Waggle || {};
Elm.Waggle.Update = Elm.Waggle.Update || {};
Elm.Waggle.Update.make = function (_elm) {
   "use strict";
   _elm.Waggle = _elm.Waggle || {};
   _elm.Waggle.Update = _elm.Waggle.Update || {};
   if (_elm.Waggle.Update.values)
   return _elm.Waggle.Update.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Waggle.Update",
   $Basics = Elm.Basics.make(_elm),
   $Dict = Elm.Dict.make(_elm),
   $Http = Elm.Http.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $QueueBuffer = Elm.QueueBuffer.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Task = Elm.Task.make(_elm),
   $Time = Elm.Time.make(_elm),
   $Waggle$Config = Elm.Waggle.Config.make(_elm),
   $Waggle$Parse = Elm.Waggle.Parse.make(_elm),
   $Waggle$Sensor = Elm.Waggle.Sensor.make(_elm);
   var ticks = $Time.every($Waggle$Config.updateInterval);
   var update = function (signalData) {
      return function () {
         var addAll = F2(function (_v0,
         _v1) {
            return function () {
               switch (_v1.ctor)
               {case "_Tuple2":
                  return function () {
                       switch (_v0.ctor)
                       {case "_Tuple2":
                          return function () {
                               var addValue = F2(function (value,
                               history) {
                                  return function () {
                                     var val = _U.insert("timestamp",
                                     _v0._0,
                                     value);
                                     var empty = $QueueBuffer.empty($Waggle$Config.historySize);
                                     var updateValue = function (maybePrev) {
                                        return function () {
                                           switch (maybePrev.ctor)
                                           {case "Just":
                                              return $Maybe.Just(A2($QueueBuffer.push,
                                                val,
                                                maybePrev._0));
                                              case "Nothing":
                                              return $Maybe.Just(A2($QueueBuffer.push,
                                                val,
                                                empty));}
                                           _U.badCase($moduleName,
                                           "between lines 36 and 39");
                                        }();
                                     };
                                     return A3($Dict.update,
                                     value.physicalQuantity,
                                     updateValue,
                                     history);
                                  }();
                               });
                               var addCurrent = F2(function (sensor,
                               history) {
                                  return function () {
                                     var updateCurrent = function (maybeSensorHistory) {
                                        return function () {
                                           switch (maybeSensorHistory.ctor)
                                           {case "Just":
                                              return $Maybe.Just(A3($List.foldr,
                                                addValue,
                                                maybeSensorHistory._0,
                                                sensor.data));
                                              case "Nothing":
                                              return $Maybe.Just($Dict.empty);}
                                           _U.badCase($moduleName,
                                           "between lines 43 and 46");
                                        }();
                                     };
                                     return A3($Dict.update,
                                     sensor.id,
                                     updateCurrent,
                                     history);
                                  }();
                               });
                               return {ctor: "_Tuple2"
                                      ,_0: _v0._0
                                      ,_1: A3($List.foldr,
                                      addCurrent,
                                      _v1._1,
                                      _v0._1)};
                            }();}
                       _U.badCase($moduleName,
                       "between lines 31 and 48");
                    }();}
               _U.badCase($moduleName,
               "between lines 31 and 48");
            }();
         });
         return A3($Signal.foldp,
         addAll,
         {ctor: "_Tuple2"
         ,_0: 0
         ,_1: $Dict.empty},
         signalData);
      }();
   };
   var rawData = $Signal.mailbox("");
   var sensorData = function ($) {
      return update($Time.timestamp($));
   }($Signal.map($Waggle$Parse.parse)(A2($Signal.sampleOn,
   ticks,
   rawData.signal)));
   var getData = $Signal.map(function (str) {
      return A2($Task.andThen,
      $Http.getString(str),
      $Signal.send(rawData.address));
   })(A2($Signal.sampleOn,
   ticks,
   $Signal.constant($Waggle$Config.sensorDataUrl)));
   _elm.Waggle.Update.values = {_op: _op
                               ,getData: getData
                               ,sensorData: sensorData};
   return _elm.Waggle.Update.values;
};