################
GN Files
################

run_gm.py
Everything starts here. Instantiates and starts the main_thread.

gn_buffer_mngr_class.py
1. All the communication with the socket is managed by this thread. Sends all msgs coming from main_thread and sensor_controller_thread to external_communicator_thread.
2. Handles encoding and decoding of ACKs obtained from NC
3. Implements the lock step protocol and hence responsible for deciding whether a new msg should be accepted or discarded
4. Sets start_communication_with_nc_event to True after successful registration.

gn_main_class.py
1. Stores system's info in config file
2. Spawns all other threads
3. Sends registration request to buffer_mngr to forward it to NC.

gn_external_communicator_class.py
1. Is an asynchat object handling communication with a NC

gn_sensor_controller_class.py
1. Imports sensor modules. For the import to work you should set your PYTHONPATH in .bashrc or .bash_profile to point to 
'~/Desktop/git/waggle/core/frameworks/node/sensormodules/weatherwx0.3' (or full path of watchdir variable defined in this file) 
2. Registers sensors, and starts new thread for each sensor module
3. Periodically collects sensor msgs and
transform them in proper format which the buffer_mngr can understand and sends to buffer_mngr.


gn_global_definition_section.py
1. Defines global variables, events if any, functions common to most threads

add_sensor_info.py
1. Contains API calls to store the sensors' info in config file. These calls should be used by sensor providers while writing the sensor module.

config_file_functions.py
1. Contains only initialize_config_file function

get_node_info.py
Runs bash scripts to collect system's info required for registration.

global_imports.py
1. Import statements of the packages used by most of the threads

nc_ip
1. Stores the IP of NC.

inst_id
1. Stores instance_id of the node

Python packages:
asynchat.py - Comparatively better version of asynchat, to run this version always include the path where this file is present in PYTHONPATH
configobj.py - Provides ConfigOBj used to store registration info


########################################################################################
FLOW
########################################################################################
1. Starts sensors and collects data from sensors periodically.
2. Side by side sends registration msg to NC.
3. Once the registration ACK is received from NC then starts sending the collected sensor msgs.
4. Once ACKs for the sent msgs are received then sends next lot of msgs and repeats like that.

- Implements Lock-Step protocol to check validity of each msg received from NC.


########################################################################################
Protocol in brief
########################################################################################

-------------highest and ackd subseq_nos

1. nc_highest_subseq_no/gn_highest_subseq_nos are used as unique sequence nos during one session.

2. nc_ackd_subseq_no/gn_ackd_subseq_nos are used to let other party know that which is the 
highest_subseq_no till which all ACKs have been obtained. This further helps in detecting the
duplicate msgs or detecting the old msgs circulating unnecessarily in case of loss
of network connectivity.

3. Every new msg is validated based on the highest and ackd subseq_nos of the previous msg and core part 
   is explained in in_expected_subseq_range function.

4. When first time the msg arrives then based on a new session id and certain other conditions
it is accepted. Conditions are written as comments in new_msg function.

########################
UPDATION OF highest_subseq_no and ackd_subseq_no:
#######################

1. Sending party: ackd and highest subseq nos are updated whenever a new msg from that party arrives.

2. Itself : 

   1. ackd subseq_no updated when:

            -1) an ACK is obtained from the other party for some msg pending in sent_gnMsgBfr
            Its explained in the code in get_and_del_saved_msg where updation of ackd_subseq_no takes place.
            OR
            -2) when the node itself sends a reply to someone and it doesn't have any pending unacknowledged msgs.
            Its explained in the code in gen_gn_ackd_subseq_no where updation of ackd_subseq_no takes place. 
   
   2. highest_subseq_no is always incremented by 1 when the node sends a new msg to a specific node.
   
#######################   
-------------MSGs

    1. A new *msg* is only sent by a GN when the corresponding sent_gnMsgBfr is not full, full is determined
    by the window size. buffer_mngr thread does this check.
    
    2. Every sent msg is buffered in the sent_gnMsgBfr till an ACK for that msg is obtained. 
   
    3. Whenever a msg times out it is resent and so at that time no check is made as we are not adding anything extra to the sent_gnMsgBfr.
    
------------ACKs
    
    1. When a duplicate ACK arrives, it is discarded as no corresponding msg is present in the 
    waiting buffer.

#######################

MISC:
--- Currently the protocol is designed to work with same window size on both the ends
    but can be easily converted to different sizes. 
    
--- Latency of sending and receiving msgs depends a lot on the count parameter in asynchat socket in external_communicator class,
    on the wait_time and sleep time of the threads and the frequency of sending msgs.
    CPU Usage/Latency also increases due to logging stuff to file.
    
--- Either remove nc.cfg, NC's session_ids and GN's session_ids together else don't touch them as these files maintain the state at both the ends

########################################################################################
BUGS Fixed
########################################################################################

1. Changes are made to the protocol related to the acknowledged subseq_no.
2. Temporarily sequence_no is changed from bytes to int to avoid errors because of sequence nos containing delimiters


##################################################################################################
Normal Errors/Exceptions due to asynchat/pika
##################################################################################################

On GN Side:

Due to asynchat:
1. GN: Unexpected subseq_no received: XXXX:XXXX:XXXX


GN: Unexpected no received: XXXX: when last_nc_subseq_no: XXXX4: nc_ackd_subseq_no: XXXX4


GN: new_session_id: xyz old_session_id: abc


GN: OLD MSG DISCARDED.............


