Elm.Waggle = Elm.Waggle || {};
Elm.Waggle.Pointer = Elm.Waggle.Pointer || {};
Elm.Waggle.Pointer.make = function (_elm) {
   "use strict";
   _elm.Waggle = _elm.Waggle || {};
   _elm.Waggle.Pointer = _elm.Waggle.Pointer || {};
   if (_elm.Waggle.Pointer.values)
   return _elm.Waggle.Pointer.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Waggle.Pointer",
   $Basics = Elm.Basics.make(_elm),
   $Graphics$Collage = Elm.Graphics.Collage.make(_elm),
   $Waggle$Config = Elm.Waggle.Config.make(_elm),
   $Waggle$Sensor = Elm.Waggle.Sensor.make(_elm),
   $Waggle$View$Util = Elm.Waggle.View.Util.make(_elm);
   var pointer = F4(function (pointerStart,
   side,
   index,
   sensorId) {
      return function () {
         var endY = 0 - $Basics.toFloat($Waggle$Config.image.height + $Waggle$Config.sensor.height) / 2 + $Basics.toFloat(($Waggle$Config.sensor.height + 2 * $Waggle$Config.sensor.marginY) * (10 - index(sensorId)));
         var endX = ($Basics.toFloat($Waggle$Config.image.width) + 2 * $Waggle$Config.image.marginX) / 2 * function () {
            var _v0 = side(sensorId);
            switch (_v0.ctor)
            {case "Left": return -1;
               case "Right": return 1;}
            _U.badCase($moduleName,
            "between lines 16 and 19");
         }();
         var start = pointerStart(sensorId);
         var dot = $Graphics$Collage.move(start)($Graphics$Collage.filled($Waggle$Config.pointerStyle.color)($Graphics$Collage.circle(6)));
         return $Graphics$Collage.group(_L.fromArray([dot
                                                     ,$Graphics$Collage.traced($Waggle$Config.pointerStyle)(A2($Graphics$Collage.segment,
                                                     start,
                                                     {ctor: "_Tuple2"
                                                     ,_0: endX
                                                     ,_1: endY}))]));
      }();
   });
   _elm.Waggle.Pointer.values = {_op: _op
                                ,pointer: pointer};
   return _elm.Waggle.Pointer.values;
};