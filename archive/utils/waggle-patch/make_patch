#!/usr/bin/env python3

import subprocess
import sys
import os
import argparse

# This script uses git commands and makes a patch file for Waggle.

class bcolors:
	HEADER = '\033[95m'
	OKBLUE = '\033[94m'
	OKGREEN = '\033[92m'
	WARNING = '\033[93m'
	FAIL = '\033[91m'
	ENDC = '\033[0m'
	BOLD = '\033[1m'
	UNDERLINE = '\033[4m'

def get_command_output(cmd):
	try:
		ret, output = subprocess.getstatusoutput(cmd)
		if ret == 0:
			return output
		else:
			raise Exception(output)
	except Exception as e:
		print(bcolors.FAIL + 'Error on ' + cmd + ':' + str(e) + bcolors.ENDC)

def get_tags(args):
	tags = get_command_output('cd %s; git show-ref --tags' % args.repo_path)
	if not tags:
		print(bcolors.FAIL + 'Could not find git tags' + bcolors.ENDC)
		sys.exit(1)

	for line in tags.split('\n'):
		id, tag = line.split()
		if args.base in tag:
			base_commit_id = id
		elif args.target in tag:
			target_commit_id = id
	return base_commit_id, target_commit_id

def print_header(repo, prev, target):
	content = '#!/bin/bash\n'
	content += '# This is automatically generated. Do not modify!\n'
	content += '# This is the update of %s from %s to %s\n\n' % (repo, prev, target)
	return content

def print_git_update_script(target):
	content = '# Update script using git\n'
	content += '# WARNING: any local changes will be deleted!\n'
	content += 'git reset --hard\n'
	content += 'git clean -f\n'
	content += 'git pull\n'
	content += 'git checkout %s\n\n' % target
	return content

def print_script(file_path):
	content = '# Script before/after the update\n'
	with open(file_path, 'r') as file:
		for line in file:
			if '#' in line or '' == line:
				continue
			content += line
	return content + '\n'


if __name__ == "__main__":
	parser = argparse.ArgumentParser(description='Generate a patch file for Waggle')
	# parser.add_argument('-e', '--extract', action='store_true', help='Extract files from the repository that need to be patched')
	parser.add_argument('-r', '--repo-path', action='store', required=True, help='The path of the Waggle repository')
	parser.add_argument('-b', '--base', action='store', required=True, help='Specify a git tag for baseline')
	parser.add_argument('-t', '--target', action='store', required=True, help='Specify a git tag for target version')
	parser.add_argument('-o', action='store', help='Specify output directory')
	parser.add_argument('--pre-script', action='store', help='Specify a script that runs before update')
	parser.add_argument('--post-script', action='store', help='Specify a script that runs after update')

	args = parser.parse_args()
	print(bcolors.HEADER + 'Begin creating patch file' + bcolors.ENDC)

	# Check if tags are available
	base_commit_id, target_commit_id = get_tags(args)
	if not base_commit_id:
		print(bcolors.FAIL + 'Could not find git tag for baseline!' + bcolors.ENDC)
		sys.exit(1)
	elif not target_commit_id:
		print(bcolors.FAIL + 'Could not find git tag for target!' + bcolors.ENDC)
		sys.exit(1)

	print(bcolors.OKGREEN + 'The base is\t%s' % args.base + bcolors.ENDC)
	print(bcolors.OKGREEN + 'The target is\t%s' % args.target + bcolors.ENDC)

	# Check the changes
	files = get_command_output('cd %s; git diff-tree -r --no-commit-id --name-status --diff-filter=ADMRT %s %s'
								% (args.repo_path, args.base, args.target))
	if not files:
		print(bcolors.FAIL + 'Nothing to be updated from base to target!' + bcolors.ENDC)
		sys.exit(1)

	print(bcolors.OKGREEN + 'The following files will be updated' + bcolors.ENDC)
	for line in files.split('\n'):
		print(bcolors.OKBLUE + line + bcolors.ENDC)

	# Add header
	repo_name = get_command_output('basename `cd %s; git rev-parse --show-toplevel`' % args.repo_path)
	content = print_header(repo_name, args.base, args.target)

	# Add pre-script
	if not os.path.isfile(args.pre_script):
		print(bcolors.FAIL + 'Failed to read pre script!' + bcolors.ENDC)
		sys.exit(1)
	content += print_script(args.pre_script)

	# Add update script
	content += print_git_update_script(args.target)

	# Add post-script
	if not os.path.isfile(args.post_script):
		print(bcolors.FAIL + 'Failed to read post script!' + bcolors.ENDC)
		sys.exit(1)
	content += print_script(args.post_script)

	# Make a patch file
	patch_ver = args.target
	patch_file = repo_name + '-' + patch_ver
	patch_file_path = ''
	if args.o:
		if not os.path.isdir(args.o):
			print(bcolors.FAIL + 'Wrong output directory:' + args.o + bcolors.ENDC)
			sys.exit(1)
		if args.o[-1] != '/':
			args.o += '/'
		patch_file_path = args.o

	with open('%supdate.sh' % patch_file_path, 'w') as file:
		file.write(content)
	os.system('cd %s; tar -zcvf %s.tar.gz update.sh > /dev/null' % (patch_file_path, patch_file))

	print(bcolors.OKGREEN + 'Done!' + bcolors.ENDC)