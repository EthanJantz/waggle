
Points of failure, how to detect them and possible solutions


Hardware:
    - Ethernet
        Detection:
        Solution:
    - Processor
        Detection:
        Solution:
    - Bus to Sensors
        Detection:
        Solution:
    - 4G antenna
        Detection:
        Solution:

Software:
    - Application
        Detection:
            - Through a heartbeat library that is imported from the applications and is responsible for replying periodicly to a watchdog application
            - By a watchdog module on the kernel or userspace in which the application's process ID is registered and would be responsible to monitor it        
        Solution:
            - In case of a failure the watchdog application or module can restart the application. In case of persistent failures a report can be send back to the Cloud. I Believe the best choice for that would be systemd
    - Middleware Client
            - Similar to the case of normal applications


    - Kernel Module
        (one thing to figure out is if we compile the kernel as one thing or if we allow modules)
        Detection:
            - I guess the kernel will have knowledge of a module crash            
        Solution:
            - If it is possible the kernel should clean up and restart the module. However, I am not sure this is possible
                (https://unix.stackexchange.com/questions/78858/cannot-remove-or-reinsert-kernel-module-after-error-while-inserting-it-without-r)
                http://www.tldp.org/HOWTO/html_single/Module-HOWTO/
                https://wiki.ubuntu.com/Kernel/CrashdumpRecipe
                http://www.av8n.com/computer/htm/kernel-lockup.htm
                

    - Operating Systems
        Detection:
            - We can detect this through a small hardware component that will always read a pin.
        Solution:
            - We can force the HW watchdog to restart when it stops receiving the "heartbeat" signal
            - We can force the kernel to restart N seconds after a kernel panic (http://xmodulo.com/2012/06/how-to-reboot-automatically-after.html)
    - Bootloader
        Detection:
            - We may detect corruption in the boot partition or the u-boot.bin
        Solution:
            - Report the problem back and use and change the boot process to use an auxiliary boot partition for next boot. kexec can be utilized to start a new kernel without going through the boot process
    - File System
        Detection:
            - We can periodically do an fsck to the file system to check its consistency.
        Solution:
            - If we detect an error that can be repaired then everything is fine. If not we may need to have a procedure that would back up the data and flash a new installation.



Watchdog software:
    - For applications:
        - https://github.com/giampaolo/psutil
        - (only ping and http )https://circus.readthedocs.org/en/0.11.1/ 
        - http://pymon.sourceforge.net/
        - http://tldp.yolinux.com/HOWTO/Process-Monitor-HOWTO.html
        - systemd 
            * http://wp.sgrosshome.com/2014/01/31/configure-synergy-client-systemd-service-auto-start-linux-fedora-20/
            * https://wiki.archlinux.org/index.php/Daemon
            * https://wiki.archlinux.org/index.php/Systemd
            * https://wiki.archlinux.org/index.php/autostarting
        - daemontools (pretty old 2001) http://cr.yp.to/daemontools/install.html
    - For kernel:
        - kexec (http://doc.opensuse.org/products/draft/SLES/SLES-tuning_sd_draft/cha.tuning.kexec.html)
        - reboot after kernel panic (http://xmodulo.com/2012/06/how-to-reboot-automatically-after.html)

    - For hardware: